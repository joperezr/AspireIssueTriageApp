@page "/"
@using AspireIssueTriageApp.FrontEnd.Models
@using AspireIssueTriageApp.FrontEnd.Services
@inject IssueViewModelService IssueViewModelService

<div class="container mt-4">
    <h3>Filter Issues</h3>
    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="howToQuestions" @bind="showHowToQuestions" @onclick="OnFilterChanged">
        <label class="form-check-label" for="howToQuestions">How-To Questions</label>
    </div>
    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="likelyBugs" @bind="showLikelyBugs" @onclick="OnFilterChanged">
        <label class="form-check-label" for="likelyBugs">Likely Bugs</label>
    </div>
    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="featureRequests" @bind="showFeatureRequests" @onclick="OnFilterChanged">
        <label class="form-check-label" for="featureRequests">Feature Requests</label>
    </div>

    <div class="table-responsive mt-3">
        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Issue</th>
                    <th>Labels</th>
                    <th>Summary</th>
                    <th>Upvotes</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var issue in FilteredIssues)
                {
                    <tr>
                        <td class="text-wrap text-break">@issue.Title</td>
                        <td>@string.Join(", ", issue.DBIssue.Labels)</td>
                        <td class="text-wrap text-break">@issue.DBIssue.Summary</td>
                        <td>@issue.DBIssue.Upvotes</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<IssueDetails> AllIssues { get; set; } = new();
    private List<IssueDetails> FilteredIssues { get; set; } = new();

    private bool showHowToQuestions = true;
    private bool showLikelyBugs = true;
    private bool showFeatureRequests = true;

    protected override async Task OnInitializedAsync()
    {
        AllIssues = await IssueViewModelService.GetAllIssuesAsync();
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        FilteredIssues = AllIssues.Where(i =>
            (showHowToQuestions && i.DBIssue.IsHowToQuestion) ||
            (showLikelyBugs && i.DBIssue.IsLikelyABug) ||
            (showFeatureRequests && i.DBIssue.IsLikelyAFeatureRequest))
            .OrderByDescending(i => i.DBIssue.Upvotes)
            .ThenByDescending(i => i.DBIssue.Url)
            .ToList();
    }

    private void OnFilterChanged()
    {
        ApplyFilters();
    }
}
