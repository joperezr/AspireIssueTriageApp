@page "/"
@using AspireIssueTriageApp.FrontEnd.Services
@using AspireIssueTriageApp.Models
@using AspireIssueTriageApp.Services
@inject IssueViewModelService IssueViewModelService
@rendermode InteractiveServer

<div class="container mt-4">
    <button class="btn btn-info" @onclick="ToggleFilterVisibility">
        @(isFilterVisible ? "Hide Filter" : "Show Filter")
    </button>
    @if (isFilterVisible)
    {
        <div class="card mb-3">
            <div class="card-body">
                <div class="row">
                    <div class="col">
                        <h5>By Category</h5>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="howToQuestions" @bind="showHowToQuestions" @bind:after="OnFilterChanged">
                            <label class="form-check-label" for="howToQuestions">How-To Questions</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="likelyBugs" @bind="showLikelyBugs" @bind:after="OnFilterChanged">
                            <label class="form-check-label" for="likelyBugs">Likely Bugs</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="featureRequests" @bind="showFeatureRequests" @bind:after="OnFilterChanged">
                            <label class="form-check-label" for="featureRequests">Feature Requests</label>
                        </div>
                    </div>
                    <div class="col">
                        @if (areaLabels is {})
                        {
                            <h5>By Area</h5>
                            <div class="row row-cols-2">
                                @foreach (var areaLabel in areaLabels)
                                {
                                    <div class="col">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="@areaLabel.Name" @bind="selectedAreaLabels[areaLabel.Name]" @bind:after="OnFilterChanged">
                                            <label class="form-check-label" for="@areaLabel.Name">@areaLabel.Name</label>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                    <div class="col">
                        <h5>By Missing Area</h5>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="missingAreaLabels" @bind="onlyShowMissingAreaLabels" @bind:after="OnFilterChanged">
                            <label class="form-check-label" for="missingAreaLabels">Missing area labels only</label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="d-flex justify-content-between mb-2">
        <div></div> <!-- Empty div to push the select to the right -->
        <div>
            <label for="pageSizeSelect" class="mr-2">Items per page:</label>
            <select id="pageSizeSelect" @onchange="OnPageSizeChanged" class="form-control d-inline-block w-auto">
                <option value="10">10</option>
                <option value="50">50</option>
                <option value="100">100</option>
            </select>
        </div>
    </div>
    <div class="table-responsive mt-3">
        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Number</th>
                    <th>Issue</th>
                    <th>Labels</th>
                    <th>Summary</th>
                    <th>Upvotes</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var issue in PagedIssues)
                {
                    <tr>
                        <td>@issue.DBIssue.Number</td>
                        <td class="text-wrap text-break">
                            @issue.Title
                            <a href="@issue.DBIssue.Url" target="_blank">[Open in GitHub]</a>
                            <a href="/issue/@issue.DBIssue.Number">[View details]</a>
                        </td>
                        <td>@string.Join(", ", issue.DBIssue.Labels)</td>
                        <td class="text-wrap text-break">@issue.DBIssue.Summary</td>
                        <td>@issue.DBIssue.Upvotes</td>
                    </tr>
                }
            </tbody>
        </table>
        <!-- Pagination controls -->
        <nav aria-label="Page navigation">
            <ul class="pagination flex-wrap">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="PreviousPage">Previous</button>
                </li>
                @for (int i = 1; i <= totalPages; i++)
                {
                    var pageIndex = i;
                    <li class="page-item @(currentPage == pageIndex ? "active" : "")">
                        <button class="page-link" @onclick="@(() => GoToPage(pageIndex))">@pageIndex</button>
                    </li>
                }
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="NextPage">Next</button>
                </li>
            </ul>
        </nav>
    </div>
</div>

@code {
    private List<IssueDetails> AllIssues { get; set; } = new();
    private List<IssueDetails> FilteredIssues { get; set; } = new();
    private List<IssueDetails> PagedIssues { get; set; } = new();

    [Inject]
    private GitHubService? GitHubService { get; set; }

    private bool isFilterVisible = true;
    private bool showHowToQuestions = true;
    private bool showLikelyBugs = true;
    private bool showFeatureRequests = true;
    private bool onlyShowMissingAreaLabels = false;
    private Dictionary<string, bool> selectedAreaLabels = new Dictionary<string, bool>();

    private int currentPage = 1;
    private int pageSize = 10; // Default to 10 items per page
    private int totalPages => (int)Math.Ceiling((double)FilteredIssues.Count / pageSize);

    protected override async Task OnInitializedAsync()
    {
        AllIssues = await IssueViewModelService.GetAllIssuesAsync();
        areaLabels = GitHubService!.GetAllAreaLabels();
        foreach (var areaLabel in areaLabels)
        {
            selectedAreaLabels[areaLabel.Name] = true;
        }
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        FilteredIssues = AllIssues.Where(i =>
            (showHowToQuestions && i.DBIssue.IsHowToQuestion) ||
            (showLikelyBugs && i.DBIssue.IsLikelyABug) ||
            (showFeatureRequests && i.DBIssue.IsLikelyAFeatureRequest))
            .OrderByDescending(i => i.DBIssue.Upvotes)
            .ThenByDescending(i => i.DBIssue.Url)
            .ToList();

        if (onlyShowMissingAreaLabels)
        {
            FilteredIssues = FilteredIssues.Where(i => !i.DBIssue.HasAreaLabels()).ToList();
        }

        UpdatePagedIssues();
    }

    private void UpdatePagedIssues()
    {
        PagedIssues = FilteredIssues
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void OnFilterChanged()
    {
        currentPage = 1;
        ApplyFilters();
    }

    private void GoToPage(int pageNumber)
    {
        if (pageNumber >= 1 && pageNumber <= totalPages)
        {
            currentPage = pageNumber;
            UpdatePagedIssues();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            UpdatePagedIssues();
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            UpdatePagedIssues();
        }
    }

    private void OnPageSizeChanged(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            pageSize = int.Parse(e.Value.ToString() ?? "10");
            currentPage = 1;
            UpdatePagedIssues();
        }
    }

    private void ToggleFilterVisibility()
    {
        isFilterVisible = !isFilterVisible;
    }


    private IReadOnlyList<AreaLabel>? areaLabels;
}
