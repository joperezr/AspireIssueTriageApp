@page "/issue/{issueNumber:int}"
@using AspireIssueTriageApp.Models
@using AspireIssueTriageApp.Services
@using Markdig
@using Microsoft.Extensions.AI
@using Octokit
@rendermode InteractiveServer

<h3 class="text-center my-4">Issue Details</h3>

@if (isLoading)
{
    <div class="d-flex justify-content-center my-4">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (issue is not {})
{
    <div class="alert alert-danger text-center" role="alert">
        Error: Issue not found.
    </div>
}
else
{
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th scope="col">Field</th>
                            <th scope="col">Details</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (gitHubIssue is {})
                        {
                            <tr>
                                <th scope="row">Author</th>
                                <td>@@@gitHubIssue.User.Login</td>
                            </tr>
                        }
                        <tr>
                            <th scope="row">Title</th>
                            <td>@issue.Title <a href="@issue.Url" target="_blank">[Open in GitHub]</a></td>
                        </tr>
                        <tr>
                            <th scope="row">Milestone</th>
                            <td>@issue.Milestone</td>
                        </tr>
                        <tr>
                            <th scope="row">Labels</th>
                            <td>
                                @foreach (var label in issue.Labels)
                                {
                                    <span class="badge rounded-pill text-bg-secondary">
                                        @label
                                        <button type="button" class="btn-close" aria-label="Close" @onclick="() => RemoveLabel(label)"></button>
                                    </span>
                                }
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">UpVotes</th>
                            <td>@issue.Upvotes</td>
                        </tr>
                        @if (gitHubIssue != null)
                        {
                            <tr>
                                <th scope="row">Description</th>
                                <td>
                                    <div class="text-wrap" style="word-wrap: break-word;">
                                        @((MarkupString)Markdown.ToHtml(gitHubIssue.Body, MarkdownPipeline))
                                    </div>
                                </td>
                            </tr>
                        }
                        <tr>
                            <th scope="row">Summary</th>
                            <td>@issue.Summary</td>
                        </tr>
                        <tr>
                            <th scope="row">Reasoning</th>
                            <td>@issue.Reasoning</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    @if (!issue.HasAreaLabels())
    {
        <div class="container mt-4">
            <div class="row justify-content-center">
                <div class="col-12">
                    <h3>Suggested Area Labels</h3>
                    <div>
                        @foreach (var suggestion in areaLabelSuggestions!)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="@suggestion.AreaLabel" @onchange="@(e =>
                                {
                                    if (bool.TryParse(e.Value?.ToString(), out bool isChecked))
                                    {
                                        if (isChecked)
                                        {
                                            selectedSuggestions.Add(suggestion);
                                        }
                                        else
                                        {
                                            selectedSuggestions.Remove(suggestion);
                                        }
                                    }
                                })">
                                <label class="form-check-label" for="@suggestion.AreaLabel">
                                    <strong>@suggestion.AreaLabel</strong> - @suggestion.Reasoning (Likelihood: @suggestion.Confidence)
                                </label>
                            </div>
                        }
                    </div>
                    <button class="btn btn-primary mt-3" @onclick="ApplyLabels">Apply</button>
                </div>
            </div>
        </div>
    }

    @if (gitHubIssue is {})
    {
        <div class="container mt-4">
            <div class="row justify-content-center">
                <div class="col-12">
                    <button class="btn btn-secondary" @onclick="ToggleComments">Toggle Comments</button>
                    @if (showComments)
                    {
                        <div class="mt-3">
                            @foreach (var comment in IssueComments)
                            {
                                <div class="card mb-3">
                                    <div class="card-header">
                                        @@@comment.Item1
                                    </div>
                                    <div class="card-body">
                                        @comment.Item2
                                    </div>
                                </div>
                            }
                        </div>
                    }    
                </div>
            </div>
        </div>
    }
}

@code {
    [Parameter]
    public int issueNumber { get; set; }

    private GitHubIssue? issue;

    private Issue? gitHubIssue;

    private bool isLoading = true;

    private bool showComments = false;

    private List<AreaLabelSuggestion> selectedSuggestions = new List<AreaLabelSuggestion>();

    private MarkdownPipeline? MarkdownPipeline;

    private IEnumerable<(string, string)> IssueComments = Array.Empty<(string, string)>();

    private IEnumerable<AreaLabelSuggestion>? areaLabelSuggestions;

    [Inject]
    private IssuesAPIClient? IssuesApiClient { get; set; }

    [Inject]
    private GitHubService? GitHubService { get; set; }

    [Inject]
    private AreaLabelSuggestionClient? AreaLabelSuggestionService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            issue = await IssuesApiClient!.GetIssueByNumberAsync(issueNumber);
            gitHubIssue = await GitHubService!.GetIssueAsync(issueNumber);

            if (gitHubIssue is {} && gitHubIssue.Comments > 0)
            {
                // Fetch comments and add them to the issue object
                IssueComments = await GitHubService!.GetIssueCommentsAsync(issueNumber);
            }

            if (issue is {} && !issue.HasAreaLabels())
            {
                areaLabelSuggestions = await AreaLabelSuggestionService!.GetAreaLabelSuggestionAsync(issue);
            }

            var pipelineBuilder = new MarkdownPipelineBuilder();
            MarkdownPipeline = pipelineBuilder.Build();
        }
        catch (Exception)
        {
            issue = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ApplyLabels()
    {
        foreach (var label in selectedSuggestions)
        {
            await GitHubService!.AddLabelToIssueAsync(issueNumber, label.AreaLabel);
            issue!.Labels.Add(label.AreaLabel);
        }

        await IssuesApiClient!.UpdateIssueAsync(issue!.Id, issue);

        // Refresh the issue details
        issue = await IssuesApiClient!.GetIssueByNumberAsync(issueNumber);
    }

    private void ToggleComments()
    {
        showComments = !showComments;
    }

    private async Task RemoveLabel(string label)
    {
        // Update the issue details
        issue!.Labels.Remove(label);

        await GitHubService!.RemoveLabelFromIssueAsync(issueNumber, label);

        await IssuesApiClient!.UpdateIssueAsync(issue!.Id, issue);
    }
}
